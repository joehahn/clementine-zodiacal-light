;orbit219.pro

;to do: flatfield, cosmic rays

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;							;
;	Set input parameters.				;
;							;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;The leading part of fits-filenames.
lead_name='/u2/hahn/clementine/new219/dk'

;The range of image-numbers (e.g., the middle part
;of the fits filenames). Note: images 6220-6221 are
;problematic, and are ignored.
start=6183
stop =6219

;but skip these image-numbers, since these files don't exist.
;Set skip = [ -1 ] to avoid skipping any image-numbers.
skip=[ 6187, 6192, 6217 ]

;The trailing part of the fits filenames.
trail_name='z.219.fits'

;flatfield & good_pixel filenames
flat_file='/users/hahn/clementine/zodiacal_light/flatfield/flatfield1.fits'
good_file='/users/hahn/clementine/zodiacal_light/flatfield/good_pix1.fits'

;The approximate (x,y) coordinates for  3 stars, (x0,y0),
;(x1,y1), and (x2,y2), that are used to align the images.
x0=25				;star0
y0=336
x1=71				;star1
y1=440
x2=359				;star2
y2=434

;The half-width of the subarrays contain the alignment stars.
w=7

;Pixels (before dark-current subtraction) above this threshold
;will be flagged as saturated.
saturate=180.0

;Select the range of pixels (in the upper-left corner)
;where the dark-current will be measured.
;NOTE: the lower-left corner might be better.
x_dark0=10
x_dark1=30
y_dark0=546
y_dark1=566

;orbit number
orbit=219

;On first entry, set lunar_limb=0 in order to run the
;proceedure that determines the lunar limb. Otherwise,
;set lunar_limb=1 to skip this step.
lunar_limb=1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;							;
;	Main program.					;
;							;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;This loop reads each image and destreaks it.
;First, generate an array of image numbers, skipping
;numbers as appropriate.
image_num=indgen(stop-start+1)+start
for j=0,n_elements(image_num)-1 do begin $
  k=where(skip eq image_num(j)) & $
  if (k(0) ne -1) then image_num(j)=-1 & $
endfor
image_num=image_num(where(image_num ge 0))
Nimages=n_elements(image_num)
exp_time=fltarr(Nimages)
headers=strarr(138,Nimages)
zero='0'
for t=0,Nimages-1 do begin $

  ;generate input filename
  middle=strtrim(string(image_num(t)),2) & $
  for j=1,4-strlen(middle) do middle=zero+middle & $
  file=lead_name+middle+trail_name & $

  ;read image and get size & header
  im=readfits(file,header,/silent) & $
  headers(0,t)=header & $
  sz=size(im) & $
  Nx=sz(1) & $
  Ny=sz(2) & $
  if (t eq 0) then begin $
    ;some setup on first entry only
    window,xs=2*Nx,ys=Ny & $
    images=fltarr(Nx,Ny,Nimages) & $
  endif & $

  ;get exposure time (in seconds) from the header
  j=where(strmid(header,0,25) eq 'COMMENT EXPOSURE_DURATION') & $
  exp_time(t)=float(strmid(header(j(0)),27,10))/1000.0 & $
  print,file,'     exposure = ',exp_time(t),' sec' & $

  ;destreak
  imd=destreak(im,exp_time(t)) & $
  images(0,0,t)=imd & $

  ;display input image and the destreaked image
  tvscl,imd*0.1/exp_time(t)>0<200 & $
  tvscl,im*0.1/exp_time(t)>0<200,Nx,0 & $

endfor

;Find the saturated pixels, and then create a mask array
;having the same dimensions as the images array. Good columns
;devoid of saturated pixels have mask=1, whereas bad columns
;containing saturated pixels have mask=0
mask=bytarr(Nx,Ny,Nimages)+1
for t=0,Nimages-1 do begin $
  for x=0,Nx-1 do begin $
    j=where(images(x,*,t) gt saturate) & $
    if (j(0) ne -1) then mask(x,*,t)=0 & $
  endfor & $
endfor
;j=where((mask eq 1) and (images gt 150)) & plot,images(j),psym=3

;Subtract an average dark-current that is measured
;on the dark portion of the moon. Be sure there there are
;not any cosmic-ray hits contaminating this measurement!
dark_mask=intarr(Nx,Ny)+1
dark_mask(x_dark0:x_dark1,y_dark0:y_dark1)=0
dark_pix=where(dark_mask eq 0)
erase
for t=0,Nimages-1 do begin $
  im=images(*,*,t) & $
  im=im-avg(im(dark_pix)) & $
  images(0,0,t)=im & $
  im(dark_pix)=30.0*exp_time(t)/0.7 & $
  tvscl,im*0.7/exp_time(t)>0<100 & $
endfor

;flatfield the data
flat=readfits(flat_file)
good_pix=readfits(good_file)
for t=0,Nimages-1 do begin $
  im=images(*,*,t)/flat & $
  images(0,0,t)=im & $
  m=mask(*,*,t)*good_pix & $
  mask(0,0,t)=m & $
endfor

;One first entry (e.g., if lunar_limb=0), click the mouse
;along four well-spaced points to determine the location
;of the lunar limb. Otherwise, restore the limb-data
;acquired during a previous iteration.
if (lunar_limb eq 0) then begin $
  xc=fltarr(Nimages) & $
  yc=fltarr(Nimages) & $
  R_moon=fltarr(Nimages) & $
  window,xs=Nx,ys=Ny & $
  for t=0,Nimages-1 do begin $
    im=images(*,*,t)*0.4/exp_time(t)>0<200 & $
    limb_click,im,x,y,r & $
    xc(t)=x & $
    yc(t)=y & $
    R_moon(t)=r & $
    radial,rad,x,y,Nx,Ny & $
    pix=where(rad le r) & $
    lmb=bytarr(Nx,Ny)+1 & $
    lmb(pix)=0 & $
    tvscl,im*lmb & $
    print,t,exp_time(t) & $
  endfor & $
  save,filename='limb.dat',xc,yc,R_moon & $
endif

;Mask the moon. Also, increase the radius of the moon by
;a few pixels to compensate for any errors and to mask any
;lunar horizon glow.
restore,filename='limb.dat'
R_moon=R_moon+3
limb=bytarr(Nx,Ny,Nimages)
for t=0,Nimages-1 do begin $
  radial,rad,xc(t),yc(t),Nx,Ny & $
  pix=where(rad le R_moon(t)) & $
  lmb=bytarr(Nx,Ny)+1 & $
  lmb(pix)=0 & $
  limb(0,0,t)=lmb & $
  tvscl,images(*,*,t)*limb(*,*,t)*max(exp_time)/exp_time(t)>0< 100 & $
endfor

;Align each image with respect to the 3 stars.
;First, determine the offsets (dx0,dy0), etc., for each frame
;using star0 to a precision (but not accuracy) of 1/MAG=0.2 pixels
register_image,images,14,dx0,dy0,MAG=5,X0=x0-w,X1=x0+w,Y0=y0-w,Y1=y0+w
;using star1
register_image,images,14,dx1,dy1,MAG=5,X0=x1-w,X1=x1+w,Y0=y1-w,Y1=y1+w
;using star2
register_image,images,14,dx2,dy2,MAG=5,X0=x2-w,X1=x2+w,Y0=y2-w,Y1=y2+w
;plot the 3 different offsets for dx & dy, average them,
;and then round off to do full-pixel shifts.
!p.multi=[0,1,2,0,0]
plot,dx0,psym=8,yrange=1.5*[-1,1],xrange=[-1,Nimages+1],xstyle=1, $
  ystyle=1,xtitle='image index',ytitle='!7D!3x    (pixels)'
oplot,dx1,psym=6
oplot,dx2,psym=1,symsize=1.5	;don't use star2---too faint!
dx=round((dx0+dx1+dx2)/3.0)
oplot,dx,thick=3,psym=10
plot,dy0,psym=8,yrange=1.5*[-1,1],xrange=[-1,Nimages+1],xstyle=1, $
  ystyle=1,xtitle='image index',ytitle='!7D!3y    (pixels)'
oplot,dy1,psym=6
oplot,dy2,psym=1,symsize=1.5
dy=round((dy0+dy1+dx2)/3.0)
oplot,dy,thick=3,psym=10
!p.multi=0
;Align images and their mask
images_reg=fltarr(Nx,Ny,Nimages)
for t=0,Nimages-1 do begin $
  images_reg(0,0,t)=shift(images(*,*,t),dx(t),dy(t)) & $
  mask(0,0,t)=shift(mask(*,*,t),dx(t),dy(t)) & $
  limb(0,0,t)=shift(limb(*,*,t),dx(t),dy(t)) & $
  if (dx(t) gt 0) then begin $
    mask(0:dx(t),*,t)=0 & $
    limb(0:dx(t),*,t)=0 & $
  endif & $
  if (dx(t) lt 0) then begin $
    mask(Nx-1+dx(t):*,*,t)=0 & $
    limb(Nx-1+dx(t):*,*,t)=0 & $
  endif & $
  if (dy(t) gt 0) then begin $
    mask(*,0:dy(t),t)=0 & $
    limb(*,0:dy(t),t)=0 & $
  endif & $
  if (dy(t) lt 0) then begin $
    mask(*,Ny-1+dy(t):*,t)=0 & $
    limb(*,Ny-1+dy(t):*,t)=0 & $
  endif & $
  tvscl,images(*,*,t)*0.7/exp_time(t)>0<100 & $
  tvscl,images_reg(*,*,t)*limb(*,*,t)*mask(*,*,t)*0.7/exp_time(t)>0<100,Nx,0 & $
endfor

;Coadd all good pixels (eg., where limb & mask both = 1)
avg_image=fltarr(Nx,Ny)
limb_mask=limb*mask
good_pix=bytarr(Nx,Ny)
for x=0,Nx-1 do begin $
  for y=0,Ny-1 do begin $
    j=where(limb_mask(x,y,*) eq 1) & $
    if (j(0) ne -1) then begin $
      avg_image(x,y)=total(images_reg(x,y,j))/total(exp_time(j)) & $
      good_pix(x,y)=1 & $
    endif & $
  endfor & $
endfor

;make pictures
im=alog(avg_image>3<3000)
im=im-min(im)
im=byte(255*im/max(im))
window,xs=Nx,ys=Ny
tvscl,im
contour,im,nlevels=10,xstyle=1,ystyle=1, $
  title='Orbit '+strtrim(string(orbit),2),charsize=1.3, $
  xtitle='pixels',ytitle='pixels'

;save results
file='orbit'+strtrim(string(orbit)+'.gif',2)
write_gif,file,im
set_plot,'ps'
device,xsize=16,ysize=21,xoffset=3,yoffset=3.5, $
  /portrait,bits_per_pixel=8
contour,im,nlevels=10,xstyle=1,ystyle=1, $
  title='Orbit '+strtrim(string(orbit),2),charsize=1.3, $
  xtitle='pixels',ytitle='pixels'
file='orbit'+strtrim(string(orbit)+'.ps',2)
output_plot,file
file='orbit'+strtrim(string(orbit)+'.dat',2)
save,filename=file,avg_image,good_pix
file='orbit'+strtrim(string(orbit)+'.fits',2)
writefits,file,avg_image

stop

contour,alog(smooth(avg_image,3)>3<2900),xstyle=1,ystyle=1,nlevels=7
t=16 & print,t,exp_time(t)
i=smooth(images_reg(*,*,t)*limb_mask(*,*,t)/exp_time(t),3)
i(0)=3
i(1)=2900
i=alog(i>3<2900)
contour,i,xstyle=1,ystyle=1,nlevels=7,noerase=1,color=128

;check the subarrays containing alignment stars.
erase
window,xs=1.5*Nx,ys=Ny
for t=0,Nimages-1 do begin $
  tvscl,images_reg(*,*,t)*0.7/exp_time(t)>0<50 & $
  sub0=images_reg(x0-w>0:x0+w<Nx-1,y0-w>0:y0+w<Ny-1,t) & $
  tvscl,sub0*0.7/exp_time(t)>0<50,Nx,y0-w & $
  sub1=images_reg(x1-w>0:x1+w<Nx-1,y1-w>0:y1+w<Ny-1,t) & $
  tvscl,sub1*0.7/exp_time(t)>0<50,Nx,y1-w & $
  sub2=images_reg(x2-w>0:x2+w<Nx-1,y2-w>0:y2+w<Ny-1,t) & $
  tvscl,sub2*0.7/exp_time(t)>0<50,Nx+2*w,y2-w & $
endfor
contour,alog(images(*,*,15)>1),xrange=x0+w*[-1,1], $
  yrange=y0+w*[-1,1],nlevels=9,xstyle=1,ystyle=1
contour,alog(images(*,*,15)>1),xrange=x1+w*[-1,1], $
  yrange=y1+w*[-1,1],nlevels=9,xstyle=1,ystyle=1
contour,alog(images(*,*,15)>1),xrange=x2+w*[-1,1], $
  yrange=y2+w*[-1,1],nlevels=9,xstyle=1,ystyle=1

for t=0,Nimages-1 do begin $
  im=images(*,*,t)*limb_mask(*,*,t)/exp_time(t)>0<3500 & $
  im(0,0)=3500 & $
  tvscl,im<20 & $
endfor
